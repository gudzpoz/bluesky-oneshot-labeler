# HOST is the domain that hosts this service.
# We provide a /.well-known/did endpoint, so you can actually
# use this service as the handle for your labeler.
# However, in this case, you will need to fill in USER_DID.
HOST=<your_domain_that_hosts_this_service>
PORT=8000
APP_ENV=local
SESSION_FILE=./session.json
DATABASE_FILE=./oneshot.db
# UPSTREAM_USER is the upstream labeler that we use to label the users.
UPSTREAM_USER=moderation.bsky.app
USERNAME=<your_labeler_account>
PASSWORD=<your_labeler_password>
# USER_DID is required if you want to use the HOST domain
# as the handle for your labeler. Otherwise, you should remove it and make it empty.
USER_DID=<your_labeler_did or empty>
# We fetch AppView data to decide if a user is over their OFFENDING_POST_RATE.
# However, the AppView does not yet specify its rate limits so we need to guess.
# Unit: req/s
APPVIEW_RATE_LIMIT=100

# Some users might post bad content occasionally, but some accounts are just full of bad content.
# We use OFFENDING_POST_RATIO to decide if a user is over their rate limit.
# Set to 0 to disable this feature.
OFFENDING_POST_RATIO=0.75

# FEED_* fields will be used when publishing the feed.
# This is the name of the feed that will be created.
# Edit internal/listener/feed_filter_user.go to change what posts to put in the feed.
FEED_NAME="<feed_name>"
# FEED_AVATAR is a local path to png/jpg files.
FEED_AVATAR="<path_to_your_avatar>"
FEED_DESCRIPTION="<description_for_your_feed>"

# Some extra block list. Users in this list are not labeled, but are blocked from the feed.
# The format of the CSV file is: <did>,<whatever>,...
# Please you need to put in DIDs (e.g., did:plc:...) but not handles (domain.bsky.social).
EXTERNAL_BLOCK_LIST=<optional_blocklist.csv>
# If you find inputing DIDs too much work, you can create a empty CSV file first,
# and put your user handle in MODERATOR_HANDLES.
# Now you can add users to the CSV block list with the Bluesky web UI:
# simply follow this labeler and report the posts to the labeler.
MODERATOR_HANDLES=<users_that_can_submit_reports(comma_separated)>
